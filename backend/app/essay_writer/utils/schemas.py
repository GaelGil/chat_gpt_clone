from pydantic import BaseModel, Field
from typing import Literal, Optional, List, Any


class ToolArguments(BaseModel):
    query: str = Field(description="The query or input for the tool.")
    retries: Optional[int] = Field(default=0, description="Number of retries allowed.")


class ToolCall(BaseModel):
    """Represents a tool call request from the LLM."""

    id: str = Field(description="The ID of the tool call.")
    name: str = Field(description="The name of the tool to call.")
    arguments: dict[str, Any] = Field(
        description="The arguments to pass to the tool. [argument: value]"
    )


class ToolCalls(BaseModel):
    id: int = Field(description="An ID for the tool calls")
    tool_calls: List[ToolCall] = Field(
        description="A list of tools to be executed sequentially."
    )


class PlannerTask(BaseModel):
    """Represents a single task generated by the Planner."""

    id: int = Field(description="Sequential ID for the task.")
    description: str = Field(
        description="Clear description of the task to be executed."
    )
    tool_suggestions: str = Field(
        description="A list of tool suggestions to be executed."
    )
    thought: str = Field(
        description="A explanation of what needs to be done and how. Includes description and tool calls."
    )
    status: Optional[
        Literal[
            "input_required",
            "completed",
            "error",
            "pending",
            "incomplete",
            "todo",
            "not_started",
        ]
    ] = Field(default="input_required", description="Status of the task")


class Plan(BaseModel):
    """Output schema for the Planner Agent."""

    original_query: str = Field(description="The original user query for context.")
    description: str = Field(description="Clear description of the overall plan.")
    tasks: List[PlannerTask] = Field(
        description="A list of tasks to be executed sequentially."
    )


class ToolResult(BaseModel):
    """Represents the result of a tool execution."""

    tool_call_id: str = Field(description="The ID of the tool call this result is for.")
    result: str = Field(description="The result of the tool execution.")
    is_error: bool = Field(
        default=False, description="Whether the tool execution resulted in an error."
    )


class ResponseFormat(BaseModel):
    """Respond to the user in this format."""

    status: Literal["input_required", "completed", "error"] = "input_required"
    question: str = Field(
        description="Input needed from the user to generate the code search plan"
    )
    content: Plan = Field(
        description="List of tasks when the code search plan is generated"
    )


class TaskExecutionResponse(BaseModel):
    """Represents a single task generated by the Planner."""

    id: int = Field(description="Id of task we are executing.")
    description: str = Field(
        description="Clear description of the task to be executed."
    )
    tools_sueggested: str = Field(
        description="A list of the tools suggested for the task"
    )
    response_type: Optional[
        Literal[
            "tool_calls",
            "text",
        ]
    ] = Field(
        default="input_required", description="The response type of the task execution"
    )
    tool_calls: List[ToolCall] = Field(
        description="A list of tool calls to be executed. Empty if response_type is text"
    )


class ContentResponse(BaseModel):
    type: str = Field(
        description="The type of content such as body paragraph, introduction conclusion etc"
    )
    context_used: str = Field(description="The context used to generate the content")
    content: str = Field(description="The content generated by the agent")


class AssembledResponse(BaseModel):
    """Represents the result of a tool execution."""

    content: str = Field(description="The assembled response.")


class ReviewResponse(BaseModel):
    """Represents the result of a tool execution."""

    thought: str = Field(description="What stood out to change or not change")
    content: str = Field(description="The assembled response.")


class WriteResponse(BaseModel):
    """Represents the result of a tool execution."""

    content: str = Field(description="The assembled response.")


class FinalResponse(BaseModel):
    """Represents the result of a tool execution."""

    content: str = Field(description="The Fully assembled response.")
