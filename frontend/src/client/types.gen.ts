// This file is auto-generated by @hey-api/openapi-ts

export type Body_login_login_access_token = {
    grant_type?: (string | null);
    username: string;
    password: string;
    scope?: string;
    client_id?: (string | null);
    client_secret?: (string | null);
};

export type CanvasData = {
    title?: (string | null);
    id: string;
    owner_id: string;
    generations: Array<GenerationData>;
    created_at: string;
};

export type CanvasesPublic = {
    data: Array<CanvasPublic>;
    count: number;
};

export type CanvasPublic = {
    title?: (string | null);
    id: string;
    owner_id: string;
};

export type GenerationData = {
    prompt?: (string | null);
    cost?: (string | null);
    provider?: (string | null);
    model?: (string | null);
    num_images?: (number | null);
    image_size?: (string | null);
    status: GenerationStatus;
    id: string;
    owner_id: string;
    created_at: string;
    images: Array<ImageGenerationPublic>;
};

export type GenerationPublic = {
    prompt?: (string | null);
    cost?: (string | null);
    provider?: (string | null);
    model?: (string | null);
    num_images?: (number | null);
    image_size?: (string | null);
    status: GenerationStatus;
    id: string;
    owner_id: string;
};

export type GenerationsPublic = {
    data: Array<GenerationPublic>;
    count: number;
};

export type GenerationStatus = 'pending' | 'completed' | 'failed';

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

export type ImageGenerationPublic = {
    id: string;
    image_url: string;
    created_at: string;
    generation_id: string;
};

export type ImageGenerationsPublic = {
    data: Array<ImageGenerationPublic>;
    count: number;
};

export type Message = {
    message: string;
};

export type NewCanvasRequest = {
    title?: (string | null);
};

export type NewGenerationRequest = {
    prompt?: (string | null);
    cost?: (number | string | null);
    provider?: (string | null);
    model?: (string | null);
    num_images?: (number | null);
    image_size?: (string | null);
    status?: GenerationStatus;
    canvas_id: string;
};

export type NewGenerationResponse = {
    message: string;
    request_id: string;
    role: RoleEnum;
};

export type NewPassword = {
    token: string;
    new_password: string;
};

export type PrivateUserCreate = {
    email: string;
    password: string;
    full_name: string;
    is_verified?: boolean;
};

export type RoleEnum = 'user' | 'system';

export type Token = {
    access_token: string;
    token_type?: string;
};

export type UpdateCanvasRequest = {
    title?: (string | null);
};

export type UpdateGenerationRequest = {
    prompt?: (string | null);
    cost?: (number | string | null);
    provider?: (string | null);
    model?: (string | null);
    num_images?: (number | null);
    image_size?: (string | null);
    status?: GenerationStatus;
};

export type UpdatePassword = {
    current_password: string;
    new_password: string;
};

export type UserCreate = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password: string;
};

export type UserPublic = {
    email: string;
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    id: string;
};

export type UserRegister = {
    email: string;
    password: string;
    full_name?: (string | null);
};

export type UsersPublic = {
    data: Array<UserPublic>;
    count: number;
};

export type UserUpdate = {
    email?: (string | null);
    is_active?: boolean;
    is_superuser?: boolean;
    full_name?: (string | null);
    password?: (string | null);
};

export type UserUpdateMe = {
    full_name?: (string | null);
    email?: (string | null);
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

export type CanvasReadCanvasesData = {
    limit?: number;
    skip?: number;
};

export type CanvasReadCanvasesResponse = (CanvasesPublic);

export type CanvasCreateCanvasData = {
    requestBody: NewCanvasRequest;
};

export type CanvasCreateCanvasResponse = (CanvasPublic);

export type CanvasReadCanvasData = {
    id: string;
};

export type CanvasReadCanvasResponse = (CanvasData);

export type CanvasUpdateCanvasData = {
    id: string;
    requestBody: UpdateCanvasRequest;
};

export type CanvasUpdateCanvasResponse = (CanvasPublic);

export type CanvasDeleteCanvasData = {
    id: string;
};

export type CanvasDeleteCanvasResponse = (Message);

export type GenerationReadGenerationsData = {
    limit?: number;
    skip?: number;
};

export type GenerationReadGenerationsResponse = (GenerationsPublic);

export type GenerationCreateGenerationData = {
    requestBody: NewGenerationRequest;
};

export type GenerationCreateGenerationResponse = (NewGenerationResponse);

export type GenerationReadGenerationData = {
    id: string;
};

export type GenerationReadGenerationResponse = (GenerationData);

export type GenerationUpdateGenerationData = {
    id: string;
    requestBody: UpdateGenerationRequest;
};

export type GenerationUpdateGenerationResponse = (GenerationPublic);

export type GenerationDeleteGenerationData = {
    id: string;
};

export type GenerationDeleteGenerationResponse = (Message);

export type GenerationFalWebhookResponse = (unknown);

export type GenerationReadImagesData = {
    limit?: number;
    skip?: number;
};

export type GenerationReadImagesResponse = (ImageGenerationsPublic);

export type LoginLoginAccessTokenData = {
    formData: Body_login_login_access_token;
};

export type LoginLoginAccessTokenResponse = (Token);

export type LoginTestTokenResponse = (UserPublic);

export type LoginRecoverPasswordData = {
    email: string;
};

export type LoginRecoverPasswordResponse = (Message);

export type LoginResetPasswordData = {
    requestBody: NewPassword;
};

export type LoginResetPasswordResponse = (Message);

export type LoginRecoverPasswordHtmlContentData = {
    email: string;
};

export type LoginRecoverPasswordHtmlContentResponse = (string);

export type PrivateCreateUserData = {
    requestBody: PrivateUserCreate;
};

export type PrivateCreateUserResponse = (UserPublic);

export type UsersReadUsersData = {
    limit?: number;
    skip?: number;
};

export type UsersReadUsersResponse = (UsersPublic);

export type UsersCreateUserData = {
    requestBody: UserCreate;
};

export type UsersCreateUserResponse = (UserPublic);

export type UsersReadUserMeResponse = (UserPublic);

export type UsersDeleteUserMeResponse = (Message);

export type UsersUpdateUserMeData = {
    requestBody: UserUpdateMe;
};

export type UsersUpdateUserMeResponse = (UserPublic);

export type UsersUpdatePasswordMeData = {
    requestBody: UpdatePassword;
};

export type UsersUpdatePasswordMeResponse = (Message);

export type UsersRegisterUserData = {
    requestBody: UserRegister;
};

export type UsersRegisterUserResponse = (UserPublic);

export type UsersReadUserByIdData = {
    userId: string;
};

export type UsersReadUserByIdResponse = (UserPublic);

export type UsersUpdateUserData = {
    requestBody: UserUpdate;
    userId: string;
};

export type UsersUpdateUserResponse = (UserPublic);

export type UsersDeleteUserData = {
    userId: string;
};

export type UsersDeleteUserResponse = (Message);

export type UtilsTestEmailData = {
    emailTo: string;
};

export type UtilsTestEmailResponse = (Message);

export type UtilsHealthCheckResponse = (boolean);